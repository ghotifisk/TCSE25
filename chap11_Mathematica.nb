(* Page 246 Basics *)

Sin[Pi/4]  
N[%]  
Sin[Pi/4] // N  
Sin[Pi/4.0]  
s = Sqrt[x^2]  
Simplify[s, Assumptions -> x > 0]  


(* Page 247 Variables and Expressions *)

a              
a = Sin[Pi/4]  
a = a // N     

expr = (x + y)^2;     
expr /. x -> 1        
expr /. x -> y        
expr /. x -> y + z    
expr /. {x->2, y->4}  


(* Page 248 Loops *)

s = 0; For[i = 1, i <= 100, i++, s += i]; s  
s = 0; Do[s += i, {i, 1, 100}]; s  
s = 0; i = 1; While[i <= 100, s += i; i++]; s  


(* Page 249 Collatz Problem *) 

count = 0; m = 100;
While[m > 1,
  m = If[EvenQ[m], m/2, 3 m + 1];
  (* If[EvenQ[m], m = m/2, m = 3 m + 1]; *)
  count++]
count  


(* Page 249 "Which" Function *) 

a = 2; Which[a == 1, x, a == 2, y, a == 3, z] 


(* Page 249, 250  Functions *) 

f[x_] = rhs
f[t] == rhs /. x -> t  

f[x_] = x^2;
f[4]       
f[a + 2a] 

Clear[a]
g[x_, y_] = a Sin[x/2] Cos[y]
g[Pi, 0]  

neg[0] = 1; neg[1] = 0;
neg[neg[1]]   
neg[t]       

f[x_] = Sin[x]/x
f[0] = 1


(* Page 251 Example 11.1 Factorial Function *)

fac[n_] := Module[ {i, prod}, 
    If[n <= 0, Return["n must be positive"]];
    prod = 1;
    For[i = 1, i <= n, i++, prod *= i];
    Return[prod]]


(* Page 251 Example 11.3 Recursive Factorial *)

fac[n_] := (If[n == 1, Return[1]]; 
            (* else *) Return[n fac[n - 1]])  
            
fac[n_] = If[n == 1, 1, n fac[n - 1]];

fac[1] = 1; 
fac[n_] := n fac[n - 1];


(* Page 252 Example 11.4 Fibonacci Function *)

fib[1] = fib[2] = 1
fib[n_] := fib[n-1] + fib[n-2]

fib[1] = fib[2] = 1
fib[n_] := fib[n] = fib[n-1] + fib[n-2]


(* Page 252 Example 11.5 Plot Sigmoid Function *)

s[x_] = 1/(1 + E^-x);
sp[x_] = E^-x/(1 + E^-x)^2;
Plot[{s[x], sp[x]}, {x, -6, 6}]


(* Page 253 Example 11.6 Plot Rosenbrock Function *)

r[x_, y_] = (1 - x)^2 + 100 (y - x^2)^2;
Plot3D[r[x, y], {x, -2, 2}, {y, -2, 4}]


(* Page 254 Example 11.7 Equation Solver *)

s = Solve[4 x^2 - 12 x  == c, x]
s /. c -> 40       
s /. c -> 42 // N  
NSolve[4 x^2 -12 x == 42, x]  


(* Page 254 Example 11.8 Equation System Solver *)

eq1 = y - x^3 - 2x^2 == -1;
eq2 = y + x^2 == 1;
sol = Solve[{eq1, eq2},{x,y}]
N[sol,3]  (


(* Page 254  Minimization *)

r[x_, y_] = (1 - x)^2 + 100 (y - x^2)^2;
min = Minimize[r[x, y], {x, y}] 
s = r[x, y] /. min[[2]]  


(* Page 255 Vector Dot Product *)

v = {1,2,3};
w = {4,5,6};
Sum[v[[i]] * w[[i]], {i,1,3}]  
v.w                            


(* Page 255 Matrix *)

A = {{1,2,3}, {4,5,6}, {7,8,9}}
MatrixForm[A]
A[[3,1]]
A[[2]]
A[[All,2]]


(* Page 255 Example 11.9 Towards Poisson Matrix *)

f[i_, j_] = Which[ 
    i == j,            4,
    Abs[i - j] == 1,  -1,  
    True,              0]   
A = Table[f[i, j], {i, 1, 3}, {j, 1, 3}] // MatrixForm


(* Page 256 Example 11.10 R3 Orthonormal Basis *)

v1 = {1, 1, 1}  / Sqrt[3];
v2 = {1, 0, -1} / Sqrt[2];
v3 = {1, -2, 1} / Sqrt[6];
v1.v1  
v1.v2  
x = {a, b, c};
y = (x.v1) v1 + (x.v2) v2 + (x.v3) v3;
Simplify[%]


(* Page 256 Example 11.11 Linear Independence *)

u1 = {1,0,2}; u2 = {0,1,1}; u3 = {1,2,-1};  
A = Transpose[{u1,u2,u3}] 
MatrixForm[A]
Det[A]  
x = {8,2,-4}
c = LinearSolve[A, x]
A.c  
c[[1]] u1 + c[[2]] u2 + c[[3]] u3 == x  
A.Inverse[A]  


(* Page 257 Example 11.12 Polynomial Vector Space *)

p1 = 1; p2 = x - 1/2; p3 = x^2 - x + 1/6;
plin = c1 p1 + c2 p2 + c3 p3;
q = a0 + a1 x + a2 x^2;
r = q - plin;
Solve[{Coefficient[r, x, 0] == 0, Coefficient[r, x, 1] == 0, 
  Coefficient[r, x, 2] == 0}, {c1, c2, c3}];
sol = Simplify[%]
plin /. sol[[1]] 
Simplify[%]
Collect[%, x]


(* Page 258 Example 11.13 Sparse Matrix *)

A = SparseArray[
    {{i_, i_} -> 4,
     {i_, j_} /; Abs[i - j] == 1 -> -1},
    {3, 3}]
A // MatrixForm  


(* Page 258 Derivation *) 

f[x_] = a x^2;
fquot[x_, h_] = (f[x + h] - f[x])/h;
flim[x_] = Limit[fquot[x, h], h -> 0];
flim[x]            
flim[x] == f'[x]    
f''[x]             


(* Page 259 Derivation *) 

f[x_,y_] = 1 + x^2  + 2 y^2
D[f[x,y], x]  
D[f[x,y], y]  
D[f[x,y],x,y]
D[f[x,y],{x,2}]


(* Page 259 Integration *)

Integrate[Sin[x]^2, x]  
Integrate[Sin[x]^2, {x, 0, Pi}]  
NIntegrate[E^(x^3), {x, 0, 2}]  

int = Integrate[1/s, {s, 1, x}];
Simplify[int, Assumptions -> x > 0]  


(* Page 260 Example 11.14 Spline Interpolation *) 

pts = {{0, 0}, {1/3, 1/3}, {2/3, 1}, {1, 3/4}};
sp3 = Interpolation[pts, InterpolationOrder -> 3];  
sp1 = Interpolation[pts, InterpolationOrder -> 1];  
p3 = Plot[sp3[x], {x, 0, 1}, PlotRange -> All];
p1 = Plot[sp1[x], {x, 0, 1}, PlotRange -> All];
lp = ListPlot[pts, PlotStyle -> PointSize[0.025]];
Show[p3, lp]
Show[p1, lp] 


(* Page 260, 261 Example 11.15 Hat Functions *)

Do[(nodes[i] = Table[{j/3, If[j == i - 1, 1, 0]}, {j, 0, 3}];
    phi[i] = Interpolation[nodes[i], InterpolationOrder -> 1];), 
    {i, 1, 4}]    
c = pts[[All, 2]]  
p[x_] = Sum[c[[i]] * phi[i][x], {i, 1, 4}]
Plot[p[x], {x, 0, 1}]


(* Page 261 Piecewise Functions *)

Quit
Do[phi[i][x_] = Piecewise[{
    { 3 x - i + 2, (i-2)/3 < x <= (i-1)/3},
    {-3 x + i,     (i-1)/3 < x < i/3}}, 0], 
    {i, 1, 4}]    
c = {0, 1/3, 1, 3/4};
p[x_] = Sum[c[[i]]*phi[i][x], {i, 1, 4}];
Plot[p[x], {x, 0, 1}]


(* Page 262 Example 11.16 IVP *)

ode = {u'[x] == x - u[x], u[0] == 1};
sol = DSolveValue[ode, u[x], x]      
Plot[sol, {x,0,5}]


(* Page  262 Example 11.17 BVP *)

ode = {u''[x] == -(1+x), u[0] == 0, u[1] == 0}
sol = DSolveValue[ode, u[x], x]  


(* Page 262 Example 11.18 Bratu Equation, Numerical Solution *)

ode = {u''[x] == -E^u[x], u[0] == 0, u[1] == 0};
sol = NDSolveValue[ode, u[x], x];
Plot[sol, {x, 0, 1}]


(* Page 263 Example 11.19 Poisson Equation *)

sol = DSolveValue[
    {Laplacian[u[x, y], {x, y}] == 6,             
    u[x, 0] == 1 + x^2, u[x, 1] == 3 + x^2,       
    u[0, y] == 1 + 2 y^2, u[1, y] == 2 + 2 y^2},  
    u[x, y], {x, y}]                              
Out= ยง$1 + x^2 + 2 y^2$ยง
Plot3D[sol, {x, 0, 1}, {y, 0, 1}]


(* Page 264 Example 11.20 Poisson Equation *)

sol = NDSolveValue[{-Laplacian[u[x, y], {x, y}] == 1,  
    DirichletCondition[u[x, y] == 0, True]},           
    u[x, y], Element[{x, y}, Rectangle[]]];            
Plot3D[sol, Element[{x, y}, Rectangle[]]]


(* Page 265 Galerkin Method *)

phi[1][x_] = x(1 - x);
phi[2][x_] = x(1/2-x)(1-x);
phi[3][x_] = x(1/3-x)(2/3-x)(1-x);
phi[4][x_] = x(1/4-x)(1/2-x)(3/4-x)(1-x);
a[u_, v_] = Integrate[-u''[x] * v[x], {x, 0, 1}];
f[x_] = x (x+3) E^x;
L[v_] = Integrate[f[x] * v[x], {x, 0, 1}];
A = Table[a[phi[i], phi[j]], {i,1,4}, {j,1,4}]; 
b = Table[L[phi[i]], {i,1,4}];
c = LinearSolve[A, b];
u[x_] = Sum[c[[j]] phi[j][x], {j,1,4}];
Plot[u[x], {x,0,1}]


(* Page 266 Finite Element Method *)

Do[phi[i][x_] = Piecewise[{
    { 10 x - i + 2, (i-2)/10 < x <= (i-1)/10},
    {-10 x + i,     (i-1)/10 < x < i/10}},
      0], 
    {i, 1, 11}]   
A = Table[Integrate[phi[i]'[x] * phi[j]'[x], 
    {x, 0, 1}], {i, 2, 10}, {j, 2, 10}];    
f[x_] = x (x + 3) E^x;
b = Table[Integrate[f[x]*phi[i][x], {x, 0, 1}], {i, 2, 10}]; 
c = LinearSolve[A, b];
u[x_] = Sum[c[[j-1]] * phi[j][x], {j, 2, 10}];
Plot[u[x], {x, 0, 1}]